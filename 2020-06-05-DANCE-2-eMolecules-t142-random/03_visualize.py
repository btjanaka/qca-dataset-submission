"""Generates a PDF of all molecules in the JSON dataset, with torsions higlighted.

The PDF is saved at `optimization_inputs.pdf`
"""

import gzip
import json

from openeye import oechem, oedepict


def read_optimization_inputs(input_json_gz):
    """ Read data generated by 01_generate.py
    Returns
    -------
    optimization_inputs: dict
        Dictionary for selected torsions, has this structure:
        [
            {
                'cmiles_identifiers': {
                    "canonical_smiles": ...,
                    ..
                },
                'atom_indices': [
                    [
                        1,
                        2,
                        3,
                        4
                    ]
                ],
                'initial_molecules': [
                    Molecule1a,
                    Molecule1b,
                    ..
                ]
            },
            ..
        ]
    """
    with gzip.open(input_json_gz, 'r') as f:
        optimization_inputs = json.load(f)
    return optimization_inputs


def main():
    """Reads in the dataset and saves the PDF."""
    optimization_inputs = read_optimization_inputs(
        "optimization_inputs.json.gz")
    pdf_filename = "optimization_inputs.pdf"

    # Generate a PDF of all molecules in the set
    itf = oechem.OEInterface()
    suppress_h = True
    rows = 10
    cols = 6
    ropts = oedepict.OEReportOptions(rows, cols)
    ropts.SetHeaderHeight(25)
    ropts.SetFooterHeight(25)
    ropts.SetCellGap(2)
    ropts.SetPageMargins(10)
    report = oedepict.OEReport(ropts)
    cellwidth, cellheight = report.GetCellWidth(), report.GetCellHeight()
    opts = oedepict.OE2DMolDisplayOptions(cellwidth, cellheight,
                                          oedepict.OEScale_Default * 0.5)
    opts.SetAromaticStyle(oedepict.OEAromaticStyle_Circle)
    pen = oedepict.OEPen(oechem.OEBlack, oechem.OEBlack, oedepict.OEFill_On,
                         1.0)
    opts.SetDefaultBondPen(pen)
    oedepict.OESetup2DMolDisplayOptions(opts, itf)

    for entry in optimization_inputs:
        # Extract molecule and torsion indices/atoms
        oemol = oechem.OEMol()
        oechem.OESmilesToMol(
            oemol,
            entry["cmiles_identifiers"]
            ["canonical_isomeric_explicit_hydrogen_mapped_smiles"],
        )
        torsion_indices = entry["atom_indices"][0]
        torsion_atoms = oechem.OEAtomBondSet()
        for atom in oemol.GetAtoms():
            if atom.GetIdx() in torsion_indices:
                torsion_atoms.AddAtom(atom)

        # Draw the molecule
        cell = report.NewCell()
        oedepict.OEPrepareDepiction(oemol, False, suppress_h)
        disp = oedepict.OE2DMolDisplay(oemol, opts)

        # Highlight the torsion atoms
        oedepict.OEAddHighlighting(
            disp,
            oechem.OEColor(oechem.OEYellow),
            oedepict.OEHighlightStyle_BallAndStick,
            torsion_atoms,
        )

        oedepict.OERenderMolecule(cell, disp)

    oedepict.OEWriteReport(pdf_filename, report)


if __name__ == "__main__":
    main()
